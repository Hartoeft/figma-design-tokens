import { IColorObj, ITypographyStyles, CssStyle } from '../models/figma.model';
import { format } from 'prettier';

const formatName = (name: string): string => {
    // TODO: Some one who knows regex please fix this.
    //Look into return prettier names
    return name
        .replaceAll('â€“', '')
        .replaceAll('-', '')
        .replaceAll('/', '')
        .replaceAll(' ', '')
        .replaceAll('(', '')
        .replaceAll(')', '')
        .toLowerCase();
};

export const formatColorTokens = (colorTokens: any[]) => {
    let content = `
        /////
        // This file is autogenerated from Figma!
        /////\n
    `;

    colorTokens.forEach((color) => {
        content += `export const ${formatName(color.name)} = '${color.color}';\n`;
    });

    return format(content, {
        parser: 'typescript',
        singleQuote: true,
        semi: true,
        useTabs: false,
        tabWidth: 4,
    });
};

export const formatTypographyTokens = (typographyTokens: ITypographyStyles[]) => {
    let content = `
        /////
        // This file is autogenerated from Figma!
        /////\n
    `;

    for (const token of typographyTokens) {
        let css = '';
        if (token.cssStyle) {
            css = Object.keys(token.cssStyle)
                .map((key) => {
                    const style = token.cssStyle?.[key as keyof CssStyle] || '';
                    return `${key}: '${style}'`;
                })
                .join(',\n');
        }
        content += `export const ${formatName(token.name)} = {
            ${css}
        };\n`;
    }

    // TODO: Add prettier options from our prettier config file
    return format(content, {
        parser: 'typescript',
        singleQuote: true,
        semi: true,
        useTabs: false,
        tabWidth: 4,
    });
};
