import { format } from 'prettier';
import { CssStyle, Effect, IEffect, ITypographyStyles } from '../models/figma.model';
const autogeneratedText = `
    /////
    // This file is autogenerated from Figma!
    /////\n
`;

const formatName = (name: string): string => {
    // TODO: Some one who knows regex please fix this.
    //Look into return prettier names
    return name
        .replaceAll('â€“', '')
        .replaceAll('-', '')
        .replaceAll('/', '')
        .replaceAll(' ', '')
        .replaceAll('(', '')
        .replaceAll(')', '')
        .toLowerCase();
};

export const formatColorTokens = (colorTokens: any[]) => {
    let content = autogeneratedText;

    colorTokens.forEach((token) => {
        content += `
            /**
             * ${token.description ? `@description ${token.description}` : ''}
             * @example backdrop-color: ${token.color};
             */
            export const ${formatName(token.name)} = '${token.color}';\n
        `;
    });

    return format(content, {
        parser: 'typescript',
        singleQuote: true,
        semi: true,
        useTabs: false,
        tabWidth: 4,
    });
};

export const formatTypographyTokens = (typographyTokens: ITypographyStyles[]) => {
    let content = autogeneratedText;

    for (const token of typographyTokens) {
        let css = '';
        if (token.cssStyle) {
            css = Object.keys(token.cssStyle)
                .map((key) => {
                    const style = token.cssStyle?.[key as keyof CssStyle];
                    if (style) {
                        return `${key}: '${style}'`;
                    }
                })
                .join(',\n');
        }
        content += `export const ${formatName(token.name)} = {
            ${css}
        };\n`;
    }

    // TODO: Add prettier options from our prettier config file
    return format(content, {
        parser: 'typescript',
        singleQuote: true,
        semi: true,
        useTabs: false,
        tabWidth: 4,
    });
};

export const formatEffectToken = (tokens: IEffect[]) => {
    let content = autogeneratedText;

    for (const token of tokens) {
        if (!token.effect) {
            continue;
        }

        content += `
            /**
             * ${token.description ? `@description ${token.description}` : ''}
             * @example backdrop-filter: ${effectTypeReturnValue(token.effect)};
             */
            export const ${formatName(token.name)} = '${effectTypeReturnValue(token.effect)}'\n\n
        `;
    }

    return format(content, {
        parser: 'typescript',
        singleQuote: true,
        semi: true,
        useTabs: false,
        tabWidth: 4,
    });
};

const effectTypeReturnValue = (effect: Effect) => {
    switch (effect.type) {
        case 'BACKGROUND_BLUR':
            return `blur(${effect.radius}px)`;

        default:
            return '';
    }
};
